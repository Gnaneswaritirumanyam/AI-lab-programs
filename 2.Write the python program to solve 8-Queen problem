def print_board(board):
    for row in board:
        print(" ".join("Q" if cell else "." for cell in row))
def is_safe(board, row, col, n):
    for i in range(row):
        if board[i][col]:
            return False
        if col - (row - i) >= 0 and board[i][col - (row - i)]:
            return False
        if col + (row - i) < n and board[i][col + (row - i)]:
            return False
    return True
def solve_one(board, row, n):
    if row == n:
        return True
    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1
            if solve_one(board, row + 1, n):
                return True
            board[row][col] = 0  # Backtrack
    return False
def solve_8_queens_one_solution():
    n = 8
    board = [[0] * n for _ in range(n)]
    if solve_one(board, 0, n):
        print_board(board)
    else:
        print("No solution found.")
solve_8_queens_one_solution()

output:
Q . . . . . . .
. . . . Q . . .
. . . . . . . Q
. . . . . Q . .
. . Q . . . . .
. . . . . . Q .
. Q . . . . . .
. . . Q . . . .
